pages = [{"l":"api/index.html","n":"API","t":" API","d":"api"},
{"l":"api/smfsb.html","n":"smfsb","t":"package smfsb","d":"smfsb"},
{"l":"api/smfsb.html","n":"DoubleState","t":"type DoubleState = DenseVector[Double]","d":"smfsb"},
{"l":"api/smfsb.html","n":"HazardVec","t":"type HazardVec = DenseVector[Double]","d":"smfsb"},
{"l":"api/smfsb.html","n":"IntState","t":"type IntState = DenseVector[Int]","d":"smfsb"},
{"l":"api/smfsb.html","n":"LogLik","t":"type LogLik = Double","d":"smfsb"},
{"l":"api/smfsb.html","n":"Time","t":"type Time = Double","d":"smfsb"},
{"l":"api/smfsb.html","n":"Ts","t":"type Ts[S] = List[(Time, S)]","d":"smfsb"},
{"l":"api/smfsb.html","n":"dvdState","t":"val dvdState: State[DoubleState]","d":"smfsb"},
{"l":"api/smfsb.html","n":"dviState","t":"val dviState: State[IntState]","d":"smfsb"},
{"l":"api/smfsb.html","n":"streamThinnable","t":"val streamThinnable: Thinnable[LazyList]","d":"smfsb"},
{"l":"api/smfsb.html","n":"tsdsDs","t":"val tsdsDs: DataSet[Ts[DoubleState]]","d":"smfsb"},
{"l":"api/smfsb.html","n":"tsisDs","t":"val tsisDs: DataSet[Ts[IntState]]","d":"smfsb"},
{"l":"api/smfsb/Abc$.html","n":"Abc","t":"object Abc","d":"smfsb/Abc$"},
{"l":"api/smfsb/Abc$.html","n":"run","t":"def run[P, D](n: Int, rprior: => P, dist: P => D): ParSeq[(P, D)]","d":"smfsb/Abc$"},
{"l":"api/smfsb/Abc$.html","n":"smc","t":"def smc[P](N: Int, rprior: => P, dprior: P => LogLik, rdist: P => Double, rperturb: P => P, dperturb: (P, P) => LogLik, factor: Int, steps: Int, verb: Boolean): ParSeq[P]","d":"smfsb/Abc$"},
{"l":"api/smfsb/Abc$.html","n":"summary","t":"def summary[P, D](output: ParSeq[(P, D)])(implicit evidence$1: CsvRow[P]): Unit","d":"smfsb/Abc$"},
{"l":"api/smfsb/CsvRow.html","n":"CsvRow","t":"trait CsvRow[T]","d":"smfsb/CsvRow"},
{"l":"api/smfsb/CsvRow.html","n":"toCsv","t":"def toCsv(value: T): String","d":"smfsb/CsvRow"},
{"l":"api/smfsb/CsvRow.html","n":"toDvd","t":"def toDvd(value: T): DenseVector[Double]","d":"smfsb/CsvRow"},
{"l":"api/smfsb/CsvRowSyntax.html","n":"CsvRowSyntax","t":"class CsvRowSyntax[T](value: T)","d":"smfsb/CsvRowSyntax"},
{"l":"api/smfsb/CsvRowSyntax.html","n":"toCsv","t":"def toCsv(implicit inst: CsvRow[T]): String","d":"smfsb/CsvRowSyntax"},
{"l":"api/smfsb/CsvRowSyntax.html","n":"toDvd","t":"def toDvd(implicit inst: CsvRow[T]): DenseVector[Double]","d":"smfsb/CsvRowSyntax"},
{"l":"api/smfsb/DataSet.html","n":"DataSet","t":"trait DataSet[D]","d":"smfsb/DataSet"},
{"l":"api/smfsb/MarkedSpn.html","n":"MarkedSpn","t":"class MarkedSpn[S](species: List[String], m: S, pre: DenseMatrix[Int], post: DenseMatrix[Int], h: (S, Time) => HazardVec)(implicit evidence$2: State[S]) extends Spn[S]","d":"smfsb/MarkedSpn"},
{"l":"api/smfsb/Mcmc$.html","n":"Mcmc","t":"object Mcmc","d":"smfsb/Mcmc$"},
{"l":"api/smfsb/Mcmc$.html","n":"nextValue","t":"def nextValue[P](logLik: P => LogLik, rprop: P => P, dprop: (P, P) => LogLik, dprior: P => LogLik, verb: Boolean)(current: (P, LogLik)): (P, LogLik)","d":"smfsb/Mcmc$"},
{"l":"api/smfsb/Mcmc$.html","n":"mhStream","t":"def mhStream[P](init: P, logLik: P => LogLik, rprop: P => P, dprop: (P, P) => LogLik, dprior: P => LogLik, verb: Boolean): LazyList[P]","d":"smfsb/Mcmc$"},
{"l":"api/smfsb/Mcmc$.html","n":"toDMD","t":"def toDMD[P](s: Seq[P])(implicit evidence$1: CsvRow[P]): DenseMatrix[Double]","d":"smfsb/Mcmc$"},
{"l":"api/smfsb/Mcmc$.html","n":"acf","t":"def acf(x: Seq[Double], lm: Int): DenseVector[Double]","d":"smfsb/Mcmc$"},
{"l":"api/smfsb/Mcmc$.html","n":"summary","t":"def summary(m: DenseMatrix[Double], plt: Boolean, lm: Int): Unit","d":"smfsb/Mcmc$"},
{"l":"api/smfsb/Mcmc$.html","n":"summary","t":"def summary[P](s: Seq[P], plot: Boolean)(implicit evidence$2: CsvRow[P]): Unit","d":"smfsb/Mcmc$"},
{"l":"api/smfsb/Mll$.html","n":"Mll","t":"object Mll","d":"smfsb/Mll$"},
{"l":"api/smfsb/Mll$.html","n":"sample","t":"def sample(n: Int, prob: DenseVector[Double]): Vector[Int]","d":"smfsb/Mll$"},
{"l":"api/smfsb/Mll$.html","n":"bpf","t":"def bpf[S, O](x0: Vector[S], t0: Time, data: Ts[O], dataLik: (S, O) => LogLik, stepFun: (S, Time, Time) => S)(implicit evidence$1: State[S]): (LogLik, Time, Vector[S])","d":"smfsb/Mll$"},
{"l":"api/smfsb/Mll$.html","n":"pfMll","t":"def pfMll[P, S, O](simX0: P => Vector[S], t0: Time, stepFun: P => (S, Time, Time) => S, dataLik: P => (S, O) => LogLik, data: Ts[O])(implicit evidence$2: State[S]): P => LogLik","d":"smfsb/Mll$"},
{"l":"api/smfsb/PMatrix.html","n":"PMatrix","t":"class PMatrix[T](x: Int, y: Int, r: Int, c: Int, data: ParVector[T])","d":"smfsb/PMatrix"},
{"l":"api/smfsb/PMatrix.html","n":"apply","t":"def apply(x: Int, y: Int): T","d":"smfsb/PMatrix"},
{"l":"api/smfsb/PMatrix.html","n":"map","t":"def map[S](f: T => S): PMatrix[S]","d":"smfsb/PMatrix"},
{"l":"api/smfsb/PMatrix.html","n":"updated","t":"def updated(x: Int, y: Int, value: T): PMatrix[T]","d":"smfsb/PMatrix"},
{"l":"api/smfsb/PMatrix.html","n":"zip","t":"def zip[S](m: PMatrix[S]): PMatrix[(T, S)]","d":"smfsb/PMatrix"},
{"l":"api/smfsb/PMatrix.html","n":"extract","t":"def extract: T","d":"smfsb/PMatrix"},
{"l":"api/smfsb/PMatrix.html","n":"coflatMap","t":"def coflatMap[S](f: PMatrix[T] => S): PMatrix[S]","d":"smfsb/PMatrix"},
{"l":"api/smfsb/PMatrix.html","n":"up","t":"def up: PMatrix[T]","d":"smfsb/PMatrix"},
{"l":"api/smfsb/PMatrix.html","n":"down","t":"def down: PMatrix[T]","d":"smfsb/PMatrix"},
{"l":"api/smfsb/PMatrix.html","n":"left","t":"def left: PMatrix[T]","d":"smfsb/PMatrix"},
{"l":"api/smfsb/PMatrix.html","n":"right","t":"def right: PMatrix[T]","d":"smfsb/PMatrix"},
{"l":"api/smfsb/PMatrix$.html","n":"PMatrix","t":"object PMatrix","d":"smfsb/PMatrix$"},
{"l":"api/smfsb/PMatrix$.html","n":"apply","t":"def apply[T](r: Int, c: Int, data: Seq[T]): PMatrix[T]","d":"smfsb/PMatrix$"},
{"l":"api/smfsb/PMatrix$.html","n":"toBDM","t":"def toBDM(m: PMatrix[Double]): DenseMatrix[Double]","d":"smfsb/PMatrix$"},
{"l":"api/smfsb/PMatrix$.html","n":"fromBDM","t":"def fromBDM[T](m: DenseMatrix[T]): PMatrix[T]","d":"smfsb/PMatrix$"},
{"l":"api/smfsb/PVector.html","n":"PVector","t":"class PVector[T](cur: Int, vec: ParVector[T])","d":"smfsb/PVector"},
{"l":"api/smfsb/PVector.html","n":"apply","t":"def apply(x: Int): T","d":"smfsb/PVector"},
{"l":"api/smfsb/PVector.html","n":"map","t":"def map[S](f: T => S): PVector[S]","d":"smfsb/PVector"},
{"l":"api/smfsb/PVector.html","n":"updated","t":"def updated(x: Int, value: T): PVector[T]","d":"smfsb/PVector"},
{"l":"api/smfsb/PVector.html","n":"zip","t":"def zip[S](y: PVector[S]): PVector[(T, S)]","d":"smfsb/PVector"},
{"l":"api/smfsb/PVector.html","n":"length","t":"val length: Int","d":"smfsb/PVector"},
{"l":"api/smfsb/PVector.html","n":"extract","t":"def extract: T","d":"smfsb/PVector"},
{"l":"api/smfsb/PVector.html","n":"coflatMap","t":"def coflatMap[S](f: PVector[T] => S): PVector[S]","d":"smfsb/PVector"},
{"l":"api/smfsb/PVector.html","n":"forward","t":"def forward: PVector[T]","d":"smfsb/PVector"},
{"l":"api/smfsb/PVector.html","n":"back","t":"def back: PVector[T]","d":"smfsb/PVector"},
{"l":"api/smfsb/Sim$.html","n":"Sim","t":"object Sim","d":"smfsb/Sim$"},
{"l":"api/smfsb/Sim$.html","n":"ts","t":"def ts[S](x0: S, t0: Time, tt: Time, dt: Time, stepFun: (S, Time, Time) => S): Ts[S]","d":"smfsb/Sim$"},
{"l":"api/smfsb/Sim$.html","n":"times","t":"def times[S](x0: S, t0: Time, timeList: List[Time], stepFun: (S, Time, Time) => S)(implicit evidence$1: State[S]): Ts[S]","d":"smfsb/Sim$"},
{"l":"api/smfsb/Sim$.html","n":"sample","t":"def sample[S](n: Int, x0: S, t0: Time, deltat: Time, stepFun: (S, Time, Time) => S)(implicit evidence$2: State[S]): List[S]","d":"smfsb/Sim$"},
{"l":"api/smfsb/Sim$.html","n":"plotTs","t":"def plotTs[S](ts: Ts[S], title: String)(implicit evidence$3: State[S]): Unit","d":"smfsb/Sim$"},
{"l":"api/smfsb/Sim$.html","n":"toCsv","t":"def toCsv[S](ts: Ts[S])(implicit evidence$4: State[S]): String","d":"smfsb/Sim$"},
{"l":"api/smfsb/Spatial$.html","n":"Spatial","t":"object Spatial","d":"smfsb/Spatial$"},
{"l":"api/smfsb/Spatial$.html","n":"gillespie1d","t":"def gillespie1d(n: Spn[IntState], d: DoubleState, minH: Double, maxH: Double): (Seq[IntState], Time, Time) => Seq[IntState]","d":"smfsb/Spatial$"},
{"l":"api/smfsb/Spatial$.html","n":"gillespie2d","t":"def gillespie2d(n: Spn[IntState], d: DoubleState, minH: Double, maxH: Double): (PMatrix[IntState], Time, Time) => PMatrix[IntState]","d":"smfsb/Spatial$"},
{"l":"api/smfsb/Spatial$.html","n":"cle1d","t":"def cle1d(n: Spn[DoubleState], d: DoubleState, dt: Double): (Seq[DoubleState], Time, Time) => Seq[DoubleState]","d":"smfsb/Spatial$"},
{"l":"api/smfsb/Spatial$.html","n":"euler1d","t":"def euler1d(n: Spn[DoubleState], d: DoubleState, dt: Double): (Seq[DoubleState], Time, Time) => Seq[DoubleState]","d":"smfsb/Spatial$"},
{"l":"api/smfsb/Spatial$.html","n":"cle2d","t":"def cle2d(n: Spn[DoubleState], d: DoubleState, dt: Double): (PMatrix[DoubleState], Time, Time) => PMatrix[DoubleState]","d":"smfsb/Spatial$"},
{"l":"api/smfsb/Spatial$.html","n":"euler2d","t":"def euler2d(n: Spn[DoubleState], d: DoubleState, dt: Double): (PMatrix[DoubleState], Time, Time) => PMatrix[DoubleState]","d":"smfsb/Spatial$"},
{"l":"api/smfsb/Spatial$.html","n":"plotTs1d","t":"def plotTs1d[S](ts: Ts[Seq[S]])(implicit evidence$1: State[S]): Unit","d":"smfsb/Spatial$"},
{"l":"api/smfsb/Spn.html","n":"Spn","t":"trait Spn[S]","d":"smfsb/Spn"},
{"l":"api/smfsb/Spn.html","n":"species","t":"def species: List[String]","d":"smfsb/Spn"},
{"l":"api/smfsb/Spn.html","n":"pre","t":"def pre: DenseMatrix[Int]","d":"smfsb/Spn"},
{"l":"api/smfsb/Spn.html","n":"post","t":"def post: DenseMatrix[Int]","d":"smfsb/Spn"},
{"l":"api/smfsb/Spn.html","n":"h","t":"def h: (S, Time) => HazardVec","d":"smfsb/Spn"},
{"l":"api/smfsb/SpnModels$.html","n":"SpnModels","t":"object SpnModels","d":"smfsb/SpnModels$"},
{"l":"api/smfsb/SpnModels$.html","n":"lv","t":"def lv[S](p: DenseVector[Double])(implicit evidence$1: State[S]): Spn[S]","d":"smfsb/SpnModels$"},
{"l":"api/smfsb/SpnModels$.html","n":"lv4","t":"def lv4[S](p: DenseVector[Double])(implicit evidence$2: State[S]): Spn[S]","d":"smfsb/SpnModels$"},
{"l":"api/smfsb/SpnModels$.html","n":"id","t":"def id[S](p: DenseVector[Double])(implicit evidence$3: State[S]): Spn[S]","d":"smfsb/SpnModels$"},
{"l":"api/smfsb/SpnModels$.html","n":"sir","t":"def sir[S](p: DenseVector[Double])(implicit evidence$4: State[S]): Spn[S]","d":"smfsb/SpnModels$"},
{"l":"api/smfsb/SpnModels$.html","n":"seir","t":"def seir[S](p: DenseVector[Double])(implicit evidence$5: State[S]): Spn[S]","d":"smfsb/SpnModels$"},
{"l":"api/smfsb/SpnModels$.html","n":"mm","t":"def mm[S](p: DenseVector[Double])(implicit evidence$6: State[S]): Spn[S]","d":"smfsb/SpnModels$"},
{"l":"api/smfsb/SpnModels$.html","n":"ar","t":"def ar[S](c: DenseVector[Double])(implicit evidence$7: State[S]): Spn[S]","d":"smfsb/SpnModels$"},
{"l":"api/smfsb/State.html","n":"State","t":"trait State[S] extends CsvRow[S]","d":"smfsb/State"},
{"l":"api/smfsb/Step$.html","n":"Step","t":"object Step","d":"smfsb/Step$"},
{"l":"api/smfsb/Step$.html","n":"gillespie","t":"def gillespie(n: Spn[IntState], minH: Double, maxH: Double): (IntState, Time, Time) => IntState","d":"smfsb/Step$"},
{"l":"api/smfsb/Step$.html","n":"pts","t":"def pts(n: Spn[IntState], dt: Double): (IntState, Time, Time) => IntState","d":"smfsb/Step$"},
{"l":"api/smfsb/Step$.html","n":"cle","t":"def cle(n: Spn[DoubleState], dt: Double): (DoubleState, Time, Time) => DoubleState","d":"smfsb/Step$"},
{"l":"api/smfsb/Step$.html","n":"euler","t":"def euler(n: Spn[DoubleState], dt: Double): (DoubleState, Time, Time) => DoubleState","d":"smfsb/Step$"},
{"l":"api/smfsb/Thinnable.html","n":"Thinnable","t":"trait Thinnable[F[_]]","d":"smfsb/Thinnable"},
{"l":"api/smfsb/Thinnable.html","n":"thin","t":"def thin[T](f: F[T], th: Int): F[T]","d":"smfsb/Thinnable"},
{"l":"api/smfsb/ThinnableSyntax.html","n":"ThinnableSyntax","t":"class ThinnableSyntax[T, F[T]](value: F[T])","d":"smfsb/ThinnableSyntax"},
{"l":"api/smfsb/ThinnableSyntax.html","n":"thin","t":"def thin(th: Int)(implicit inst: Thinnable[F]): F[T]","d":"smfsb/ThinnableSyntax"},
{"l":"api/smfsb/UnmarkedSpn.html","n":"UnmarkedSpn","t":"class UnmarkedSpn[S](species: List[String], pre: DenseMatrix[Int], post: DenseMatrix[Int], h: (S, Time) => HazardVec)(implicit evidence$1: State[S]) extends Spn[S]","d":"smfsb/UnmarkedSpn"},
{"l":"api/index.html","n":"API","t":" API","d":"api"}];